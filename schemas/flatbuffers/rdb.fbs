// RDB FlatBuffers Schema for Scintirete
// Defines data structures for RDB snapshots

namespace scintirete.rdb;

enum DistanceMetric : byte {
  UNSPECIFIED = 0,
  L2 = 1,
  COSINE = 2,
  INNER_PRODUCT = 3
}

// HNSW Node connections at a specific layer
table LayerConnections {
  layer: int32;
  connected_node_ids: [string];
}

// HNSW Node with complete graph information
table HNSWNode {
  id: string;
  elements: [float];
  metadata: string; // JSON-encoded metadata for flexibility
  deleted: bool;
  layer_connections: [LayerConnections]; // Connections at each layer
  max_layer: int32; // The highest layer this node belongs to
}

// Vector data structure (legacy, for backwards compatibility)
table Vector {
  id: string;
  elements: [float];
  metadata: string; // JSON-encoded metadata for flexibility
}

// HNSW parameters
table HNSWParams {
  m: int32;
  ef_construction: int32;
  ef_search: int32;
  max_layers: int32;
  seed: int64;
}

// HNSW Graph state
table HNSWGraph {
  nodes: [HNSWNode];
  entrypoint_id: string;
  max_layer: int32;
  size: int32;
}

// Collection configuration
table CollectionConfig {
  name: string;
  metric: DistanceMetric;
  hnsw_params: HNSWParams;
}

// Collection snapshot with HNSW graph
table CollectionSnapshot {
  name: string;
  config: CollectionConfig;
  vectors: [Vector]; // Legacy field for backwards compatibility
  hnsw_graph: HNSWGraph; // New field for HNSW graph state
  vector_count: int64;
  deleted_count: int64;
  created_at: int64; // Unix timestamp
  updated_at: int64; // Unix timestamp
}

// Database snapshot
table DatabaseSnapshot {
  name: string;
  collections: [CollectionSnapshot];
  created_at: int64; // Unix timestamp
}

// Root RDB snapshot
table RDBSnapshot {
  version: string;
  timestamp: int64; // Unix timestamp
  databases: [DatabaseSnapshot];
  metadata: string; // JSON-encoded metadata for flexibility
}

root_type RDBSnapshot; 