name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: ""
          
          # Windows
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: windows
            goarch: arm64
            suffix: ".exe"
          
          # macOS
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          
          # FreeBSD
          - goos: freebsd
            goarch: amd64
            suffix: ""
          
          # OpenBSD
          - goos: openbsd
            goarch: amd64
            suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protoc plugins
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate protobuf code
      run: make proto-gen

    - name: Set environment variables
      run: |
        echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
        if [ "${{ matrix.goarm }}" != "" ]; then
          echo "GOARM=${{ matrix.goarm }}" >> $GITHUB_ENV
        fi

    - name: Build binaries
      run: |
        # Create output directory
        mkdir -p dist
        
        # Build server binary
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${GITHUB_REF_NAME} -X main.commit=${GITHUB_SHA}" \
          -o dist/scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          ./cmd/scintirete-server
        
        # Build CLI binary
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${GITHUB_REF_NAME} -X main.commit=${GITHUB_SHA}" \
          -o dist/scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          ./cmd/scintirete-cli

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Create zip for Windows
          zip scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.zip \
            scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
            scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        else
          # Create tar.gz for Unix-like systems
          tar -czf scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz \
            scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
            scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: scintirete-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.*

  create-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Scintirete ${{ github.ref_name }}
          
          **Scintirete** - 基于HNSW算法的轻量级向量数据库
          
          ### 📦 二进制包下载
          
          选择适合您操作系统和架构的版本：
          
          #### Linux
          - `scintirete-linux-amd64.tar.gz` - Linux x86_64
          - `scintirete-linux-arm64.tar.gz` - Linux ARM64
          - `scintirete-linux-arm.tar.gz` - Linux ARM v7
          
          #### Windows
          - `scintirete-windows-amd64.zip` - Windows x86_64
          - `scintirete-windows-arm64.zip` - Windows ARM64
          
          #### macOS
          - `scintirete-darwin-amd64.tar.gz` - macOS Intel
          - `scintirete-darwin-arm64.tar.gz` - macOS Apple Silicon
          
          #### 其他系统
          - `scintirete-freebsd-amd64.tar.gz` - FreeBSD x86_64
          - `scintirete-openbsd-amd64.tar.gz` - OpenBSD x86_64
          
          ### 🚀 快速开始
          
          1. 下载对应系统的二进制包
          2. 解压到目标目录
          3. 运行 `./scintirete-server --help` 查看使用说明
          
    - name: Upload Release Assets
      run: |
        for dir in scintirete-*; do
          if [ -d "$dir" ]; then
            for file in "$dir"/*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
              fi
            done
          fi
        done 