name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: ""
          
          # Windows
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: windows
            goarch: arm64
            suffix: ".exe"
          
          # macOS
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          
          # FreeBSD
          - goos: freebsd
            goarch: amd64
            suffix: ""
          
          # OpenBSD
          - goos: openbsd
            goarch: amd64
            suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protoc plugins
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate protobuf code
      run: make proto-gen

    - name: Set environment variables
      run: |
        echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
        if [ "${{ matrix.goarm }}" != "" ]; then
          echo "GOARM=${{ matrix.goarm }}" >> $GITHUB_ENV
        fi

    - name: Build binaries
      run: |
        # Create output directory
        mkdir -p dist
        
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF_NAME#v}
        COMMIT=${GITHUB_SHA}
        
        # Build server binary
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${VERSION} -X main.commit=${COMMIT}" \
          -o dist/scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          ./cmd/scintirete-server
        
        # Build CLI binary
        CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${VERSION} -X main.commit=${COMMIT}" \
          -o dist/scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          ./cmd/scintirete-cli

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Create zip for Windows
          zip scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.zip \
            scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
            scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        else
          # Create tar.gz for Unix-like systems
          tar -czf scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz \
            scintirete-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
            scintirete-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scintirete-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/scintirete-${{ matrix.goos }}-${{ matrix.goarch }}.*

  # Docker 镜像构建和推送
  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    needs: [release, docker]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## Scintirete ${{ github.ref_name }}
        
        **Scintirete** - 基于HNSW算法的轻量级向量数据库
        
        ### 📦 二进制包下载
        
        选择适合您操作系统和架构的版本：
        
        #### Linux
        - `scintirete-linux-amd64.tar.gz` - Linux x86_64
        - `scintirete-linux-arm64.tar.gz` - Linux ARM64
        - `scintirete-linux-arm.tar.gz` - Linux ARM v7
        
        #### Windows
        - `scintirete-windows-amd64.zip` - Windows x86_64
        - `scintirete-windows-arm64.zip` - Windows ARM64
        
        #### macOS
        - `scintirete-darwin-amd64.tar.gz` - macOS Intel
        - `scintirete-darwin-arm64.tar.gz` - macOS Apple Silicon
        
        #### 其他系统
        - `scintirete-freebsd-amd64.tar.gz` - FreeBSD x86_64
        - `scintirete-openbsd-amd64.tar.gz` - OpenBSD x86_64
        
        ### 🐳 Docker 镜像
        
        Docker 镜像已自动推送到 GitHub Container Registry：
        
        ```bash
        # 拉取最新版本
        docker pull ghcr.io/${{ github.repository_owner }}/scintirete:${{ github.ref_name }}
        
        # 拉取 latest 版本（如果是默认分支）
        docker pull ghcr.io/${{ github.repository_owner }}/scintirete:latest
        
        # 运行容器
        docker run -d \
          --name scintirete \
          -p 8080:8080 \
          -p 9090:9090 \
          -v scintirete-data:/app/data \
          ghcr.io/${{ github.repository_owner }}/scintirete:${{ github.ref_name }}
        ```
        
        ### 🚀 快速开始
        
        #### 使用二进制文件
        1. 下载对应系统的二进制包
        2. 解压到目标目录
        3. 运行 `./scintirete-server --help` 查看使用说明
        
        #### 使用 Docker
        ```bash
        # 使用 docker-compose
        wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
        docker-compose up -d
        
        # 或直接运行
        docker run -p 8080:8080 -p 9090:9090 ghcr.io/${{ github.repository_owner }}/scintirete:${{ github.ref_name }}
        ```
        EOF
        
        # Check if it's a pre-release (contains dev, alpha, beta, rc)
        if [[ "${{ github.ref_name }}" =~ (dev|alpha|beta|rc) ]]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        # Create release using gh CLI
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ github.ref_name }}" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG \
          ./scintirete-*/* 