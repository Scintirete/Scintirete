// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: scintirete/v1/scintirete.proto

package scintiretev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScintireteService_CreateDatabase_FullMethodName    = "/scintirete.v1.ScintireteService/CreateDatabase"
	ScintireteService_DropDatabase_FullMethodName      = "/scintirete.v1.ScintireteService/DropDatabase"
	ScintireteService_ListDatabases_FullMethodName     = "/scintirete.v1.ScintireteService/ListDatabases"
	ScintireteService_CreateCollection_FullMethodName  = "/scintirete.v1.ScintireteService/CreateCollection"
	ScintireteService_DropCollection_FullMethodName    = "/scintirete.v1.ScintireteService/DropCollection"
	ScintireteService_GetCollectionInfo_FullMethodName = "/scintirete.v1.ScintireteService/GetCollectionInfo"
	ScintireteService_ListCollections_FullMethodName   = "/scintirete.v1.ScintireteService/ListCollections"
	ScintireteService_InsertVectors_FullMethodName     = "/scintirete.v1.ScintireteService/InsertVectors"
	ScintireteService_DeleteVectors_FullMethodName     = "/scintirete.v1.ScintireteService/DeleteVectors"
	ScintireteService_Search_FullMethodName            = "/scintirete.v1.ScintireteService/Search"
	ScintireteService_EmbedAndInsert_FullMethodName    = "/scintirete.v1.ScintireteService/EmbedAndInsert"
	ScintireteService_EmbedAndSearch_FullMethodName    = "/scintirete.v1.ScintireteService/EmbedAndSearch"
)

// ScintireteServiceClient is the client API for ScintireteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScintireteService 定义了向量数据库的所有可操作接口
type ScintireteServiceClient interface {
	// --- 数据库管理 ---
	// 创建一个新的数据库
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除一个数据库及其所有集合
	DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列出所有数据库
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	// --- 集合管理 ---
	// 在指定数据库中创建一个新的集合
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除一个集合
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取集合的元数据信息
	GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfo, error)
	// 列出指定数据库中的所有集合
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	// --- 向量数据操作 ---
	// 插入预先计算好的向量（支持批量）
	InsertVectors(ctx context.Context, in *InsertVectorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除指定ID的向量（标记删除）
	DeleteVectors(ctx context.Context, in *DeleteVectorsRequest, opts ...grpc.CallOption) (*DeleteVectorsResponse, error)
	// 根据向量进行相似度搜索
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// --- 文本自动嵌入与操作 ---
	// 传入文本，自动调用 embedding API 后插入（支持批量）
	EmbedAndInsert(ctx context.Context, in *EmbedAndInsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 传入文本，自动调用 embedding API 后进行搜索
	EmbedAndSearch(ctx context.Context, in *EmbedAndSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type scintireteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScintireteServiceClient(cc grpc.ClientConnInterface) ScintireteServiceClient {
	return &scintireteServiceClient{cc}
}

func (c *scintireteServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_CreateDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_DropDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, ScintireteService_ListDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_DropCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, ScintireteService_GetCollectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, ScintireteService_ListCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) InsertVectors(ctx context.Context, in *InsertVectorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_InsertVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) DeleteVectors(ctx context.Context, in *DeleteVectorsRequest, opts ...grpc.CallOption) (*DeleteVectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVectorsResponse)
	err := c.cc.Invoke(ctx, ScintireteService_DeleteVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ScintireteService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) EmbedAndInsert(ctx context.Context, in *EmbedAndInsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScintireteService_EmbedAndInsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scintireteServiceClient) EmbedAndSearch(ctx context.Context, in *EmbedAndSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ScintireteService_EmbedAndSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScintireteServiceServer is the server API for ScintireteService service.
// All implementations must embed UnimplementedScintireteServiceServer
// for forward compatibility.
//
// ScintireteService 定义了向量数据库的所有可操作接口
type ScintireteServiceServer interface {
	// --- 数据库管理 ---
	// 创建一个新的数据库
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*emptypb.Empty, error)
	// 删除一个数据库及其所有集合
	DropDatabase(context.Context, *DropDatabaseRequest) (*emptypb.Empty, error)
	// 列出所有数据库
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	// --- 集合管理 ---
	// 在指定数据库中创建一个新的集合
	CreateCollection(context.Context, *CreateCollectionRequest) (*emptypb.Empty, error)
	// 删除一个集合
	DropCollection(context.Context, *DropCollectionRequest) (*emptypb.Empty, error)
	// 获取集合的元数据信息
	GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*CollectionInfo, error)
	// 列出指定数据库中的所有集合
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	// --- 向量数据操作 ---
	// 插入预先计算好的向量（支持批量）
	InsertVectors(context.Context, *InsertVectorsRequest) (*emptypb.Empty, error)
	// 删除指定ID的向量（标记删除）
	DeleteVectors(context.Context, *DeleteVectorsRequest) (*DeleteVectorsResponse, error)
	// 根据向量进行相似度搜索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// --- 文本自动嵌入与操作 ---
	// 传入文本，自动调用 embedding API 后插入（支持批量）
	EmbedAndInsert(context.Context, *EmbedAndInsertRequest) (*emptypb.Empty, error)
	// 传入文本，自动调用 embedding API 后进行搜索
	EmbedAndSearch(context.Context, *EmbedAndSearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedScintireteServiceServer()
}

// UnimplementedScintireteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScintireteServiceServer struct{}

func (UnimplementedScintireteServiceServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedScintireteServiceServer) DropDatabase(context.Context, *DropDatabaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedScintireteServiceServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedScintireteServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedScintireteServiceServer) DropCollection(context.Context, *DropCollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedScintireteServiceServer) GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedScintireteServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedScintireteServiceServer) InsertVectors(context.Context, *InsertVectorsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertVectors not implemented")
}
func (UnimplementedScintireteServiceServer) DeleteVectors(context.Context, *DeleteVectorsRequest) (*DeleteVectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectors not implemented")
}
func (UnimplementedScintireteServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedScintireteServiceServer) EmbedAndInsert(context.Context, *EmbedAndInsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedAndInsert not implemented")
}
func (UnimplementedScintireteServiceServer) EmbedAndSearch(context.Context, *EmbedAndSearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedAndSearch not implemented")
}
func (UnimplementedScintireteServiceServer) mustEmbedUnimplementedScintireteServiceServer() {}
func (UnimplementedScintireteServiceServer) testEmbeddedByValue()                           {}

// UnsafeScintireteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScintireteServiceServer will
// result in compilation errors.
type UnsafeScintireteServiceServer interface {
	mustEmbedUnimplementedScintireteServiceServer()
}

func RegisterScintireteServiceServer(s grpc.ServiceRegistrar, srv ScintireteServiceServer) {
	// If the following call pancis, it indicates UnimplementedScintireteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScintireteService_ServiceDesc, srv)
}

func _ScintireteService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_DropDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).DropDatabase(ctx, req.(*DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_GetCollectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).GetCollectionInfo(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_InsertVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertVectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).InsertVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_InsertVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).InsertVectors(ctx, req.(*InsertVectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_DeleteVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).DeleteVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_DeleteVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).DeleteVectors(ctx, req.(*DeleteVectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_EmbedAndInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedAndInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).EmbedAndInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_EmbedAndInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).EmbedAndInsert(ctx, req.(*EmbedAndInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScintireteService_EmbedAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedAndSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScintireteServiceServer).EmbedAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScintireteService_EmbedAndSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScintireteServiceServer).EmbedAndSearch(ctx, req.(*EmbedAndSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScintireteService_ServiceDesc is the grpc.ServiceDesc for ScintireteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScintireteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scintirete.v1.ScintireteService",
	HandlerType: (*ScintireteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _ScintireteService_CreateDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _ScintireteService_DropDatabase_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _ScintireteService_ListDatabases_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _ScintireteService_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _ScintireteService_DropCollection_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _ScintireteService_GetCollectionInfo_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _ScintireteService_ListCollections_Handler,
		},
		{
			MethodName: "InsertVectors",
			Handler:    _ScintireteService_InsertVectors_Handler,
		},
		{
			MethodName: "DeleteVectors",
			Handler:    _ScintireteService_DeleteVectors_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ScintireteService_Search_Handler,
		},
		{
			MethodName: "EmbedAndInsert",
			Handler:    _ScintireteService_EmbedAndInsert_Handler,
		},
		{
			MethodName: "EmbedAndSearch",
			Handler:    _ScintireteService_EmbedAndSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scintirete/v1/scintirete.proto",
}
